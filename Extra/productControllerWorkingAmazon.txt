const axios = require('axios');
const cheerio = require('cheerio');
const Product = require('../Models/productModel');
const Wishlist = require('../Models/wishlistModel');

// Conversion rate from USD to INR (example rate, update as needed)
const USD_TO_INR = 83;

// Function to convert price to INR
function convertToINR(price) {
    const parsedPrice = parseFloat(price.replace(/[^0-9.-]+/g, '')); // Extract numeric value
    if (isNaN(parsedPrice)) return '₹0'; // Return ₹0 if invalid
    return '₹' + (parsedPrice * USD_TO_INR).toLocaleString('en-IN'); // Convert and format as INR
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Scraping function for Flipkart
async function scrapeFlipkart(productName) {
    try {
        const response = await axios.get(`https://www.flipkart.com/search?q=${productName}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' },
        });
        const $ = cheerio.load(response.data);
        let products = [];
        $('._1AtVbE').each((index, element) => {
            let title = $(element).find('._4rR01T').text().trim();
            let price = $(element).find('._30jeq3').text().trim();
            let link = `https://www.flipkart.com${$(element).find('a').attr('href')}`;
            let image = $(element).find('img').attr('src');
            if (title && price && link && image) {
                products.push({ title, price, link, image, source: 'Flipkart' });
            }
        });
        return products;
    } catch (error) {
        console.error('Error scraping Flipkart:', error.message);
        return [];
    }
}

// Scraping function for Amazon
async function scrapeAmazon(productName) {
    try {
        const response = await axios.get(`https://www.amazon.in/s?k=${productName}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' },
        });
        const $ = cheerio.load(response.data);
        let products = [];
        $('.s-main-slot .s-result-item').each((index, element) => {
            let title = $(element).find('.a-text-normal').text().trim();
            let price = $(element).find('.a-price .a-offscreen').text().trim();
            let link = `https://www.amazon.in${$(element).find('.a-link-normal').attr('href')}`;
            let image = $(element).find('img').attr('src');
            if (title && price && link && image) {
                products.push({ title, price, link, image, source: 'Amazon' });
            }
        });
        return products;
    } catch (error) {
        console.error('Error scraping Amazon:', error.message);
        return [];
    }
}

// Scraping function for Myntra
async function scrapeMyntra(productName) {
    try {
        const response = await axios.get(`https://www.myntra.com/${productName}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' },
        });
        const $ = cheerio.load(response.data);
        let products = [];
        $('.product-base').each((index, element) => {
            let title = $(element).find('h3').text().trim();
            let price = $(element).find('span[data-qa="product-price"]').text().trim();
            let link = `https://www.myntra.com${$(element).find('a').attr('href')}`;
            let image = $(element).find('img').attr('src');
            if (title && price && link && image) {
                products.push({ title, price, link, image, source: 'Myntra' });
            }
        });
        return products;
    } catch (error) {
        console.error('Error scraping Myntra:', error.message);
        return [];
    }
}

// Scraping function for ShopClues
async function scrapeShopClues(productName) {
    try {
        const response = await axios.get(`https://www.shopclues.com/search?q=${productName}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' },
        });
        const $ = cheerio.load(response.data);
        let products = [];
        $('.product-grids .product').each((index, element) => {
            let title = $(element).find('.prodname').text().trim();
            let price = $(element).find('.p_price .p_price_value').text().trim();
            let link = `https://www.shopclues.com${$(element).find('a').attr('href')}`;
            let image = $(element).find('img').attr('src');
            if (title && price && link && image) {
                products.push({ title, price, link, image, source: 'ShopClues' });
            }
        });
        return products;
    } catch (error) {
        console.error('Error scraping ShopClues:', error.message);
        return [];
    }
}



// Scraping function for Limeroad
async function scrapeLimeroad(productName) {
    try {
        const response = await axios.get(`https://www.limeroad.com/search/${productName}`, {
            headers: { 'User-Agent': 'Mozilla/5.0' },
        });
        const $ = cheerio.load(response.data);
        let products = [];
        $('.product-item').each((index, element) => {
            let title = $(element).find('.product-title').text().trim();
            let price = $(element).find('.price').text().trim();
            let link = `https://www.limeroad.com${$(element).find('a').attr('href')}`;
            let image = $(element).find('img').attr('src');
            if (title && price && link && image) {
                products.push({ title, price, link, image, source: 'Limeroad' });
            }
        });
        return products;
    } catch (error) {
        console.error('Error scraping Limeroad:', error.message);
        return [];
    }
}

// Save product to DB...
async function saveProductToDB(product) {
    const newProduct = new Product(product);
    try {
        await newProduct.save();
    } catch (error) {
        console.error('Error saving product to DB:', error);
    }
}

// Route to handle adding products to wishlist
async function handleWishlistDisplay(req, res) {
    const { title, price, link, image, source } = req.body;
    const newWishlistItem = new Wishlist({ title, price, link, image, source });
    try {
        await newWishlistItem.save();
        return res.status(200).json({ message: 'Item added to wishlist!' });
    } catch (error) {
        console.error('Error saving wishlist item:', error.message);
        return res.status(500).json({ message: 'Error adding item to wishlist.' });
    }
};

// Route to show wishlist
async function handleWishlistRequest(req, res) {
    try {
        const wishlistItems = await Wishlist.find(); // Fetch all items from the wishlist
        res.render('wishlist', { wishlistItems }); // Render the wishlist view
    } catch (error) {
        console.error('Error fetching wishlist items:', error.message);
        res.status(500).json({ message: 'Error fetching wishlist items.' });
    }
};

// Route to handle product search and results rendering
async function handleResultsDisplay(req, res) {
    const productName = req.body.productName;
    if (!productName) {
        return res.redirect('/search'); // Redirect if no product specified
    }

    // Redirect to GET /results route with query string
    res.redirect(`/results?productName=${encodeURIComponent(productName)}`);
};

// Route to show search results with pagination
async function handleResultsRequest(req, res){
    const productName = req.query.productName || '';
    const page = parseInt(req.query.page) || 1; // Current page defaults to 1
    const itemsPerPage = 9; // Number of items per page

    // Query MongoDB for matching products
    let productsFromDB = await Product.find({
        title: new RegExp(productName, 'i'), // Case-insensitive regex search
    })
        .skip((page - 1) * itemsPerPage)
        .limit(itemsPerPage);

    // Total product count for pagination
    const totalProductsFromDB = await Product.countDocuments({
        title: new RegExp(productName, 'i'),
    });

    const totalPagesFromDB = Math.ceil(totalProductsFromDB / itemsPerPage);

    // If no products found in DB or not enough for the current page number,
    // scrape data from websites...
    if (productsFromDB.length === 0 || totalProductsFromDB < itemsPerPage * page) {
        try {
            // Scrape data from multiple websites
            const [flipkartProducts,
                amazonProducts,
                myntraProducts,
                shopCluesProducts,
                limeroadProducts] =
                await Promise.all([
                    scrapeFlipkart(productName),
                    scrapeAmazon(productName),
                    scrapeMyntra(productName),
                    scrapeShopClues(productName),
                    scrape(productName),
                    scrapeLimeroad(productName)
                ]);

            // Combine all scraped products
            productsFromDB = [
                ...flipkartProducts,
                ...amazonProducts,
                ...myntraProducts,
                ...shopCluesProducts,
                ...limeroadProducts
            ];

            // Save the scraped products to the DB
            await Promise.all(productsFromDB.map(saveProductToDB));

            // Recalculate totalProducts after scraping
            const totalProductsAfterScraping = productsFromDB.length;

            // Calculate total pages after scraping
            const totalPagesAfterScraping = Math.ceil(totalProductsAfterScraping / itemsPerPage);

            // Fetch the products for the current page again after scraping
            productsFromDB = productsFromDB.slice((page - 1) * itemsPerPage, page * itemsPerPage);

            // Use the total pages after scraping
            res.render('results', {
                products: productsFromDB,
                productName,
                page,
                totalPages: totalPagesAfterScraping,
                convertToINR
            });
        } catch (error) {
            console.error('Error during scraping:', error.message);
            res.status(500).json({ message: 'Error during scraping.' });
        }
    } else {
        // Render the results page with the products and pagination info
        res.render('results', {
            products: productsFromDB,
            productName,
            page,
            totalPages: totalPagesFromDB,
            convertToINR
        });
    }
};

module.exports = {
    handleWishlistDisplay,
    handleWishlistRequest,
    handleResultsDisplay,
    handleResultsRequest,
};
